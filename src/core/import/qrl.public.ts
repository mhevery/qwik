import { runtimeQrl, staticQrl, toInternalQRL } from './qrl';
import { getPlatform } from '../platform/platform';

// <docs markdown="./qrl.public.md#QRL">
// !!DO NOT EDIT THIS COMMENT DIRECTLY!!! (edit ./qrl.public.md instead)
/**
 * `QRL` type represents a lazy loadable AND serializable resource.
 * 
 * QRL stands for Qwik URL.
 * 
 * Use `QRL` when you want to refer to a lazy loaded resource. `QRL`s are most often used for
 * code (functions) but can also be used for other resources such as `string`s in the case of
 * styles.
 * 
 * `QRL` is an opaque token which is generated by the Qwik Optimizer. (Do not rely on any
 * properties in `QRL` as it may change between versions.)
 * 
 * ## Creating `QRL` references
 * 
 * Creating `QRL` is done using `$(...)` function. `$(...)` is a special marker for the Qwik
 * Optimizer that marks that the code should be extracted into a lazy loaded symbol.
 * 
 * ```typescript
 * onDocument(
 *   'mousemove',
 *   $(() => console.log('mousemove'))
 * );
 * ```
 * 
 * In the above code the Qwik Optimizer detects `$(...)` and transforms the code as shown below:
 * 
 * ```typescript
 * // FILE: <current file>
 * onDocument('mousemove', qrl('./chunk-abc.js', 'onMousemove'));
 * 
 * // FILE: chunk-abc.js
 * export const onMousemove = () => console.log('mousemove');
 * ```
 * 
 * NOTE: `qrl(...)` is a result of Qwik Optimizer transformation. You should never have to invoke
 * this function directly in your application. The `qrl(...)` function should be invoked only
 * after Qwik Optimizer transformation.
 * 
 * ## Using `QRL`s
 * 
 * Use `QRL` type in your application when you want to get a lazy loadable reference to a
 * resource (most likely a function.)
 * 
 * ```typescript
 * // Example of declaring a custom functions which takes callback as QRL.
 * export function useMyFunction(callback: QRL<() => void>) {
 *   doExtraStuff();
 *   // The callback passed to `onDocument` requires `QRL`.
 *   onDocument('mousemove', callback);
 * }
 * ```
 * 
 * In the above example the way to think about the code is that you are not asking for a callback
 * function, but rather a reference to a lazy loadable call back function. Specifically the
 * function loading should be delayed until it is actually needed. In the above example the
 * function would not load until after a `mousemove` event on `document` fires.
 * 
 * ## Resolving `QRL` references
 * 
 * At times it may be need to resolve a `QRL` reference to the actual value. This can be
 * performed using `qrlImport(..)` function.
 * 
 * ```typescript
 * // Assume you have QRL reference to a greet function
 * const lazyGreet: QRL<() => void> = $(() => console.log('Hello World!'));
 * 
 * // Use `qrlImport` to load / resolve the reference.
 * const greet: () => void = await qrlImport(element, lazyGreet);
 * 
 * //  Invoke it
 * greet();
 * ```
 * 
 * NOTE: `element` is needed because `QRL`s are relative and need base location to resolve
 * against. The base location is encoded in the HTML in the form of `<div q:base="/url">`.
 * 
 * ## Question: Why not just use `import()`?
 * 
 * At first glance `QRL` serves the same purpose as `import()`. However there are three subtle
 * differences which need to be taken into account.
 * 
 * 1. `QRL`s must be serializable into HTML.
 * 2. `QRL`s must be resolved by framework relative to `q:base`.
 * 3. `QRL`s must be able to capture lexically scoped variables.
 * 4. `QRL`s encapsulate difference between running with and without Qwik Optimizer.
 * 5. `QRL`s allow expressing lazy loaded boundary without thinking about chunk and symbol names.
 * 
 * Let's assume that you intend to write code such as this:
 * 
 * ```typescript
 * return <button onClick={() => (await import('./chunk-abc.js')).onClick}>
 * ```
 * 
 * The above code needs to be serialized into DOM such as:
 * 
 * ```
 * <div q:base="/build/">
 *   <button on:click="./chunk-abc.js#onClick">...</button>
 * </div>
 * ```
 * 
 * 1. Notice there is no easy wat to extract chunk (`./chunk-abc.js`) and symbol (`onClick`) into
 * HTML.
 * 2. Notice that even if you could extract it, the `import('./chunk-abc.js')` would become
 * relative to where the `import()` file is declared. Because it is our framework doing the load,
 * the `./chunk-abc.js` would become relative to the framework file. This is not correct, as it
 * should be relative to the original file generated by the bundler.
 * 3. Next the framework needs to resolve the `./chunk-abc.js` and needs a base location which is
 * encoded in the HTML.
 * 4. The QRL needs to be able to capture lexically scoped variables. (`import()` only allows
 * loading top level symbol which don't capture variables.)
 * 5. As a developer you don't want to think about `import` and naming of the chunks and symbols.
 * You just want to say, this should be lazy.
 * 
 * The above are the main reasons why Qwik introduces its own concept of `QRL`.
 * 
 * See: `$`
 * 
 * @public
 */
// </docs>
export interface QRL<TYPE = any> {
  __brand__QRL__: TYPE;
}

// <docs markdown="./qrl.public.md#qrlImport">
// !!DO NOT EDIT THIS COMMENT DIRECTLY!!! (edit ./qrl.public.md instead)
/**
 * Lazy load a `QRL` symbol and return the lazy loaded value value.
 * 
 * See: `QRL`
 * 
 * @param element - Location of the URL to resolve against. This is needed to take `q:base` into
 * account.
 * @param qrl - QRL to load.
 * @returns A resolved QRL value as a Promise.
 * @public
 */
// </docs>
export async function qrlImport<T>(element: Element, qrl: QRL<T>): Promise<T> {
  const qrl_ = toInternalQRL(qrl);
  if (qrl_.symbolRef) return qrl_.symbolRef;
  const doc = element.ownerDocument!;
  if (qrl_.symbolFn) {
    return (qrl_.symbolRef = qrl_.symbolFn().then((module) => module[qrl_.symbol]));
  } else {
    return (qrl_.symbolRef = await getPlatform(doc).importSymbol(element, qrl_.chunk, qrl_.symbol));
  }
}

// <docs markdown="./qrl.public.md#$">
// !!DO NOT EDIT THIS COMMENT DIRECTLY!!! (edit ./qrl.public.md instead)
/**
 * Qwik Optimizer marker function.
 * 
 * Use `$(...)` to tell Qwik Optimizer to extract the expression in `$(...)` into a lazy loadable
 * resource referenced by `QRL`.
 * 
 * See: `implicit$FirstArg` for additional `____$(...)` rules.
 * 
 * In this example `$(...)` is used to capture the callback function of `onmousemove` into lazy
 * loadable reference. This allows the code to refer to the function without actually loading the
 * function. In this example the callback function does not get loaded until `mousemove` event
 * fires.
 * 
 * ```typescript
 * onDocument(
 *   'mousemove',
 *   $(() => console.log('mousemove'))
 * );
 * ```
 * 
 * In the above code the Qwik Optimizer detects `$(...)` and transforms the code as shown below:
 * 
 * ```typescript
 * // FILE: <current file>
 * onDocument('mousemove', qrl('./chunk-abc.js', 'onMousemove'));
 * 
 * // FILE: chunk-abc.js
 * export const onMousemove = () => console.log('mousemove');
 * ```
 * 
 * ## Special Rules
 * 
 * The Qwik Optimizer places special rules on functions which can be lazy loaded.
 * 
 * 1. The expression of the `$(expression)` function must be importable by the system.
 * (expression shows up in `import` or has `export`)
 * 2. If inlined function then all lexically captured values must be:
 *    - importable (vars shows up in `import` or has `export`)
 *    - const (the capturing process differs from JS capturing in that writing to captured
 * variables does not update them, and therefore writes are forbidden. Best practice is that all
 * captured variables are constants.)
 *    - Must be runtime serializable.
 * 
 * ```typescript
 * import { importedFn } from './qrl.examples';
 * 
 * export const greet = () => console.log('greet');
 * function topLevelFn() {}
 * 
 * function myCode() {
 *   const store = useStore({});
 *   function localFn() {}
 *   // Valid Examples
 *   $(greet); // greet is importable
 *   $(importedFn); // importedFn is importable
 *   $(() => greet()); // greet is importable;
 *   $(() => importedFn()); // importedFn is importable
 *   $(() => console.log(store)); // store is serializable.
 * 
 *   // Compile time errors
 *   $(topLevelFn); // ERROR: `topLevelFn` not importable
 *   $(() => topLevelFn()); // ERROR: `topLevelFn` not importable
 * 
 *   // Runtime errors
 *   $(localFn); // ERROR: `localFn` fails serialization
 *   $(() => localFn()); // ERROR: `localFn` fails serialization
 * }
 * 
 * ```
 * 
 * @param expression
 * @public
 */
// </docs>
export function $<T>(expression: T): QRL<T> {
  return runtimeQrl(expression);
}

// <docs markdown="./qrl.public.md#implicit$FirstArg">
// !!DO NOT EDIT THIS COMMENT DIRECTLY!!! (edit ./qrl.public.md instead)
/**
 * Create a `____$(...)` convenience method from `___(...)`.
 * 
 * It is very common for functions to take lazy-loadable resource as a first argument. For this
 * reason QwikOptimizer automatically extracts first argument from any function which ends in
 * `$`.
 * 
 * This means that `foo$(arg0)` and `foo($(arg0))` are equivalent with respect to Qwik Optimizer.
 * The former is just a short hand for latter.
 * 
 * For example all of these function call are equivalent:
 * 
 * - `component$(() => {...})` is same as `onRender($(() => {...}))`
 * - `onRender$(() => <>...</>)` is same as `onRender($(() => <>...</>))`
 * 
 * ```typescript
 * export function myApi(callback: QRL<() => void>): void {
 *   // ...
 * }
 * 
 * export const myApi$ = implicit$FirstArg(myApi);
 * // type of myApi$: (callback: () => void): void
 * 
 * // can be used as:
 * myApi$(() => console.log('callback'));
 * 
 * // will be transpiled to:
 * // FILE: <current file>
 * myApi(qrl('./chunk-abc.js', 'callback'));
 * 
 * // FILE: chunk-abc.js
 * export const callback = () => console.log('callback');
 * ```
 * 
 * @param fn
 * @public
 */
// </docs>
export function implicit$FirstArg<FIRST, REST extends any[], RET>(
  fn: (first: QRL<FIRST>, ...rest: REST) => RET
): (first: FIRST, ...rest: REST) => RET {
  return function (first: FIRST, ...rest: REST): RET {
    return fn.call(null, $(first), ...rest);
  };
}

// <docs markdown="./qrl.public.md#qrl">
// !!DO NOT EDIT THIS COMMENT DIRECTLY!!! (edit ./qrl.public.md instead)
/**
 * Used by Qwik Optimizer to point to lazy loaded resources.
 * 
 * This function should be used by the Qwik Optimizer only. The function should not be directly
 * refereed to in source code of application.
 * 
 * See: `QRL`, `$(...)`
 * 
 * @param chunkOrFn
 * @param symbol
 * @param lexicalScopeCapture
 * @public
 */
// </docs>
export const qrl: <T = any>(
  chunkOrFn: string | (() => Promise<any>),
  symbol: string,
  lexicalScopeCapture?: any[]
) => QRL<T> = staticQrl;
